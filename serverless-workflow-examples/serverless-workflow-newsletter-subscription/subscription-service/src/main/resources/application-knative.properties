# Build the application with the persistence profile to use a PostgreSQL database.
# Kogito persistence configurations for enabling the serverless workflow persistence
quarkus.datasource.db-kind=postgresql
kogito.persistence.type=postgresql
kogito.persistence.auto.ddl=true
kogito.persistence.query.timeout.millis=10000
enable.resource.postgresql=true

# DB configuration, also used by the PostgreSqlQueryRecordRepository
# This env var will be generated with the quarkus-kubernetes plugin. See below.
quarkus.datasource.reactive.url=postgresql://${POSTGRES_HOST:localhost}:5432/postgres
quarkus.datasource.username=postgres
quarkus.datasource.password=pass

quarkus.knative.env.mapping.postgres_password.from-secret=newsletter-postgres
quarkus.knative.env.mapping.postgres_password.with-key=postgrespass

## Knative integration
# this enables Knative to fetch the image information on Minikube.
# you can change this property with -Pknative -Dquarkus.container-image.group from the command line.
quarkus.container-image.group=dev.local
quarkus.kubernetes.deployment-target=knative
quarkus.knative.name=subscription-service
quarkus.knative.image-pull-policy=IfNotPresent
quarkus.knative.env.vars.postgres_host=newsletter-postgres

###################   tracing enabled #################
# Watch out - setting below changes image name created by -Pknative profile to what is save here
quarkus.application.name=serverless-workflow-newsletter-subscription-service
quarkus.opentelemetry.enabled=true
# next below only settable during build time - need b3multi to propagate all b3 headers from proxy or else trace graph is flat after entering subscription flow
quarkus.opentelemetry.propagators=b3,b3multi,tracecontext,jaeger
# directly to jaeger collector
# for Serverless install
#quarkus.opentelemetry.tracer.exporter.otlp.endpoint=http://jaeger-all-in-one-inmemory-collector.tracing-system.svc.cluster.local:4317/api/traces
# for Service mesh install
quarkus.opentelemetry.tracer.exporter.otlp.endpoint=http://jaeger-collector.istio-system.svc:4317/api/traces
quarkus.log.level=DEBUG

###### jdbc - dedicated JDBC driver, you must configure your datasource and Hibernate ORM to use it
## add ':otel' to your database URL=
## use the 'OpenTelemetryDriver' instead of the one for your database
#quarkus.datasource.jdbc.driver=io.opentelemetry.instrumentation.jdbc.OpenTelemetryDriver
## configure Hibernate ORM dialect
#quarkus.hibernate-orm.dialect=org.hibernate.dialect.PostgreSQLDialect

